[
  {
    "item": "http://www.wikidata.org/entity/Q1133472",
    "itemLabel": "format string attack",
    "itemDescription": "type of software vulnerability",
    "link": "https://en.wikipedia.org/wiki/Uncontrolled_format_string",
    "text": "Uncontrolled format string is a type of software vulnerability discovered around 1989 that can be used in security exploits. Previously thought harmless, format string exploits can be used to crash a program or to execute harmful code. The problem stems from the use of unchecked user input as the format string parameter in certain C functions that perform formatting, such as printf(). A malicious user may use the %s and %x format tokens, among others, to print data from the call stack or possibly other locations in memory. One may also write arbitrary data to arbitrary locations using the %n format token, which commands printf() and similar functions to write the number of bytes formatted to an address stored on the stack.",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q1141093",
    "itemLabel": "cross-site authentication attack",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q1141098",
    "itemLabel": "cross-site tracing",
    "itemDescription": "network security vulnerability exploiting the HTTP TRACE method",
    "link": "https://en.wikipedia.org/wiki/Cross-site_tracing",
    "text": "In web security, cross-site tracing (abbreviated \"XST\") is a network security vulnerability exploiting the HTTP TRACE method.\nXST scripts exploit ActiveX, Flash, or any other controls that allow executing an HTTP TRACE request. The HTTP TRACE response includes all the HTTP headers including authentication data and HTTP cookie contents, which are then available to the script. In combination with cross domain access flaws in web browsers, the exploit is able to collect the cached credentials of any web site, including those utilizing SSL.",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q1423448",
    "itemLabel": "integer overflow",
    "itemDescription": "in programming, a condition that occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits",
    "link": "https://en.wikipedia.org/wiki/Integer_overflow",
    "text": "In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits \u2013 either larger than the maximum or lower than the minimum representable value.\nThe most common result of an overflow is that the least significant representable digits of the result are stored; the result is said to wrap around the maximum (i.e. modulo a power of the radix, usually two in modern computers, but sometimes ten or another radix).\nAn overflow condition may give results leading to unintended behavior. In particular, if the possibility has not been anticipated, overflow can compromise a program's reliability and security.\nFor some applications, such as timers and clocks, wrapping on overflow can be desirable. The C11 standard states that for unsigned integers modulo wrapping is the defined behavior and the term overflow never applies: \"a computation involving unsigned operands can never overflow.\"On some processors like graphics processing units (GPUs) and digital signal processors (DSPs) which support saturation arithmetic, overflowed results would be \"clamped\", i.e. set to the minimum or the maximum value in the representable range, rather than wrapped around.",
    "aliases": [],
    "superClasses": [
      "arithmetic overflow"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q1476964",
    "itemLabel": "covert channel",
    "itemDescription": "type of computer security attack that creates a capability to transfer information objects between processes that are not supposed to be allowed to communicate",
    "link": "https://en.wikipedia.org/wiki/Covert_channel",
    "text": "In computer security, a covert channel is a type of attack that creates a capability to transfer information objects between processes that are not supposed to be allowed to communicate by the computer security policy.  The term, originated in 1973 by Lampson, is defined as channels \"not intended for information transfer at all, such as the service program's effect on system load,\" to distinguish it from legitimate channels that are subjected to access controls by COMPUSEC.",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q15714796",
    "itemLabel": "XPath injection",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q1592277",
    "itemLabel": "HTTP header injection",
    "itemDescription": "web application vulnerability that occurs when HTTP headers are dynamically generated from user input; can allow for HTTP response splitting, session fixation (via Set-Cookie), cross-site scripting, and malicious redirect attacks (via Location)",
    "link": "https://en.wikipedia.org/wiki/HTTP_header_injection",
    "text": "HTTP header injection is a general class of web application security vulnerability which occurs when Hypertext Transfer Protocol (HTTP) headers are dynamically generated based on user input. Header injection in HTTP responses can allow for HTTP response splitting, Session fixation via the Set-Cookie header, cross-site scripting (XSS), and malicious redirect attacks via the location header. HTTP header injection is a relatively new area for web-based attacks, and has primarily been pioneered by Amit Klein in his work on request/response smuggling/splitting.\n\n",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q16244272",
    "itemLabel": "Heartbleed",
    "itemDescription": "software bug in OpenSSL",
    "link": "https://en.wikipedia.org/wiki/Heartbleed",
    "text": "Heartbleed is a security bug in the OpenSSL cryptography library, which is a widely used implementation of the Transport Layer Security (TLS) protocol. It was introduced into the software in 2012 and publicly disclosed in April 2014. Heartbleed may be exploited regardless of whether the vulnerable OpenSSL instance is running as a TLS server or client. It results from improper input validation (due to a missing bounds check) in the implementation of the TLS heartbeat extension. Thus, the bug's name derives from heartbeat. The vulnerability is classified as a buffer over-read, a situation where more data can be read than should be allowed.Heartbleed is registered in the Common Vulnerabilities and Exposures database as CVE-2014-0160. The federal Canadian Cyber Incident Response Centre issued a security bulletin advising system administrators about the bug. A fixed version of OpenSSL was released on April 7, 2014, on the same day Heartbleed was publicly disclosed.As of  May 20, 2014, 1.5% of the 800,000 most popular TLS-enabled websites were still vulnerable to Heartbleed.TLS implementations other than OpenSSL, such as GnuTLS, Mozilla's Network Security Services, and the Windows platform implementation of TLS, were not affected because the defect existed in the OpenSSL's implementation of TLS rather than in the protocol itself.",
    "aliases": [
      "Heartbleed bug",
      "CVE-2014-0160"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q18123513",
    "itemLabel": "Shellshock",
    "itemDescription": "security bug in the Unix Bash shell",
    "link": "https://en.wikipedia.org/wiki/Shellshock_(software_bug)",
    "text": "Shellshock, also known as Bashdoor, is a family of security bugs in the widely used Unix Bash shell, the first of which was disclosed on 24 September 2014. Many Internet-facing services, such as some web server deployments, use Bash to process certain requests, allowing an attacker to cause vulnerable versions of Bash to execute arbitrary commands. This can allow an attacker to gain unauthorized access to a computer system.St\u00e9phane Chazelas contacted Bash's maintainer, Chet Ramey, on 12 September 2014 telling Ramey about his discovery of the original bug, which he called \"Bashdoor\". Working together with security experts, he soon had a patch as well. The bug was assigned the identifier CVE-2014-6271. It was announced to the public on 24 September 2014 when Bash updates with the fix were ready for distribution.The first bug causes Bash to unintentionally execute commands when the commands are concatenated to the end of function definitions stored in the values of environment variables. Within days of the publication of this, intense scrutiny of the underlying design flaws discovered a variety of related vulnerabilities (CVE-2014-6277, CVE-2014-6278, CVE-2014-7169, CVE-2014-7186 and CVE-2014-7187); which Ramey addressed with a series of further patches.Attackers exploited Shellshock within hours of the initial disclosure by creating botnets of compromised computers to perform distributed denial-of-service attacks and vulnerability scanning. Security companies recorded millions of attacks and probes related to the bug in the days following the disclosure.Shellshock could potentially compromise millions of unpatched servers and other systems.  Accordingly, it has been compared to the Heartbleed bug in its severity.",
    "aliases": [
      "Shellshock software bug",
      "Bashdoor",
      "Bash bug"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q18274255",
    "itemLabel": "POODLE",
    "itemDescription": "man-in-the-middle exploit taking advantage of fallback to SSL 3.0, disclosed on October 2014",
    "link": "https://en.wikipedia.org/wiki/POODLE",
    "text": "The POODLE attack (which stands for \"Padding Oracle On Downgraded Legacy Encryption\") is a man-in-the-middle exploit which takes advantage of Internet and security software clients' fallback to SSL 3.0. If attackers successfully exploit this vulnerability, on average, they only need to make 256 SSL 3.0 requests to reveal one byte of encrypted messages. Bodo M\u00f6ller, Thai Duong and Krzysztof Kotowicz from the Google Security Team discovered this vulnerability; they disclosed the vulnerability publicly on October 14, 2014 (despite the paper being dated \"September 2014\" ). On December 8, 2014 a variation of the POODLE vulnerability that affected TLS was announced.The CVE-ID associated with the original POODLE attack is CVE-2014-3566.\nF5 Networks filed for CVE-2014-8730 as well, see POODLE attack against TLS section below.",
    "aliases": [
      "POODLE vulnerability",
      "POODLE attack",
      "Padding Oracle On Downgraded Legacy Encryption"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q19410276",
    "itemLabel": "FREAK",
    "link": "https://en.wikipedia.org/wiki/FREAK",
    "text": "FREAK (\"Factoring RSA Export Keys\") is a security exploit of a cryptographic weakness in the SSL/TLS protocols introduced decades earlier for compliance with U.S. cryptography export regulations. These involved limiting exportable software to use only public key pairs with RSA moduli of 512 bits or less (so-called RSA_EXPORT keys), with the intention of allowing them to be broken easily by the National Security Agency (NSA), but not by other organizations with lesser computing resources. However, by the early 2010s, increases in computing power meant that they could be broken by anyone with access to relatively modest computing resources using the well-known Number Field Sieve algorithm, using as little as $100 of cloud computing services. Combined with the ability of a man-in-the-middle attack to manipulate the initial cipher suite negotiation between the endpoints in the connection and the fact that the Finished hash only depended on the master secret, this meant that a man-in-the-middle attack with only a modest amount of computation could break the security of any website that allowed the use of 512-bit export-grade keys. While the exploit was only discovered in 2015, its underlying vulnerabilities had been present for many years, dating back to the 1990s.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q19605981",
    "itemLabel": "firmware vulnerability",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q19984009",
    "itemLabel": "Logjam",
    "itemDescription": "security vulnerability against a Diffie\u2013Hellman key exchange ranging from 512-bit to 1024-bit keys, publicly reported on 20 May 2015",
    "link": "https://en.wikipedia.org/wiki/Logjam_(computer_security)",
    "text": "Logjam is a security vulnerability against a Diffie\u2013Hellman key exchange ranging from 512-bit (US export-grade) to 1024-bit keys. It was discovered by a group of computer scientists and publicly reported on May 20, 2015.",
    "aliases": [
      "Logjam attack"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q20736433",
    "itemLabel": "Stagefright",
    "itemDescription": "software bug in Android",
    "link": "https://en.wikipedia.org/wiki/Stagefright_(bug)",
    "text": "Stagefright is the name given to a group of software bugs that affect versions 2.2 (\"Froyo\") and newer of the Android operating system. The name is taken from the affected library, which among other things, is used to unpack MMS messages. Exploitation of the bug allows an attacker to perform arbitrary operations on the victim's device through remote code execution and privilege escalation.  Security researchers demonstrate the bugs with a proof of concept that sends specially crafted MMS messages to the victim device and in most cases requires no end-user actions upon message reception to succeed\u2014the user doesn\u2019t have to do anything to \u2018accept\u2019 exploits using the bug, it happens in the background. A phone number is the only information needed to carry out the attack.The underlying attack vector exploits certain integer overflow vulnerabilities in the Android core component called \"Stagefright\", which is a complex software library implemented primarily in C++ as part of the Android Open Source Project (AOSP) and used as a backend engine for playing various multimedia formats such as MP4 files.The discovered bugs have been provided with multiple Common Vulnerabilities and Exposures (CVE) identifiers, CVE-2015-1538, CVE-2015-1539, CVE-2015-3824, CVE-2015-3826, CVE-2015-3827, CVE-2015-3828, CVE-2015-3829 and CVE-2015-3864 (the latter one has been assigned separately from the others), which are collectively referred to as the Stagefright bug.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q22909837",
    "itemLabel": "Unauthorized Cross-App Resource Access",
    "itemDescription": "category of zero-day vulnerabilities in computer software systems",
    "link": "https://en.wikipedia.org/wiki/XARA",
    "text": "XARA is an acronym for \"Unauthorized Cross-App Resource Access\", which describes a category of zero-day vulnerabilities in computer software systems.",
    "aliases": [
      "XARA"
    ],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q22985864",
    "itemLabel": "DROWN attack",
    "itemDescription": "cross-protocol attack against TLS using the SSLv2 protocol",
    "link": "https://en.wikipedia.org/wiki/DROWN_attack",
    "text": "The DROWN (Decrypting RSA with Obsolete and Weakened eNcryption) attack is a cross-protocol security bug that attacks servers supporting modern TLS protocol suites by using their support for the obsolete, insecure, SSL v2 protocol to leverage an attack on connections using up-to-date protocols that would otherwise be secure. DROWN can affect all types of servers that offer services encrypted with TLS yet still support SSLv2, provided they share the same public key credentials between the two protocols.  Additionally, if the same public key certificate is used on a different server that supports SSLv2, the TLS server is also vulnerable due to the SSLv2 server leaking key information that can be used against the TLS server.Full details of DROWN were announced in March 2016, along with a patch that disables SSLv2 in OpenSSL; the vulnerability was assigned the ID CVE-2016-0800. The patch alone will not be sufficient to mitigate the attack if the certificate can be found on another SSLv2 host. The only viable countermeasure is to disable SSLv2 on all servers.\nThe researchers estimated that 33% of all HTTPS sites were affected by this vulnerability as of March 1, 2016.",
    "aliases": [
      "DROWN"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q24885556",
    "itemLabel": "PE infection",
    "itemDescription": "technique, usually used to spread malware, that inserts extra data or executable code into Portable Executable files",
    "link": "https://en.wikipedia.org/wiki/PE_infection",
    "text": "Malware (a portmanteau for malicious software) is any software intentionally designed to cause damage to a computer, server, client, or computer network. Malware does the damage after it is implanted or introduced in some way into a target's computer and can take the form of executable code, scripts, active content, and other software. The code is described as computer viruses, worms, Trojan horses, ransomware, spyware, adware, and scareware, among other terms.  Malware has a malicious intent, acting against the interest of the computer user\u2014and so does not include software that causes unintentional harm due to some deficiency, which is typically described as a software bug.\nPrograms officially supplied by companies can be considered malware if they secretly act against the interests of the computer user. For example, at one point Sony music Compact discs silently installed a rootkit on purchasers' computers with the intention of preventing illicit copying; but which also reported on users' listening habits, and unintentionally created extra security vulnerabilities.One strategy for protecting against malware is to prevent the malware software from gaining access to the target computer. For this reason, antivirus software, firewalls and other strategies are used to help protect against the introduction of malware, in addition to checking for the presence of malware and malicious activity and recovering from attacks.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q254569",
    "itemLabel": "backdoor",
    "itemDescription": "method of bypassing normal authentication on a computer",
    "link": "https://en.wikipedia.org/wiki/Backdoor_(computing)",
    "text": "A backdoor is a method, often secret, of bypassing normal authentication or encryption in a computer system, a product, or an embedded device (e.g. a home router), or its embodiment, e.g. as part of a cryptosystem, an algorithm, a chipset, or a \"homunculus computer\" \u2014a tiny computer-within-a-computer (such as that as found in Intel's AMT technology). Backdoors are often used for securing remote access to a computer, or obtaining access to plaintext in cryptographic systems.\nA backdoor may take the form of a hidden part of a program, a separate program (e.g. Back Orifice may subvert the system through a rootkit), code in the firmware of the hardware, or parts of an operating system such as Windows. Trojan horses can be used to create vulnerabilities in a device. A Trojan Horse may appear to be an entirely legitimate program, but when executed, it enacts an activity that may install a backdoor. Although some are secretly installed, other backdoors are deliberate and widely known. These kinds of backdoors have \"legitimate\" uses such as providing the manufacturer with a way to restore user passwords. The backdoor may be used to gain access to passwords, delete data on hard drives, or transfer information within the cloud.\nMany systems that store information within the cloud fail to create accurate security measures. If many systems are connected within the cloud, hackers can gain access to all other platforms through the most vulnerable system.Default passwords (or other default credentials) can function as backdoors if they are not changed by the user. Some debugging features can also act as backdoors if they are not removed in the release version.In 1993, the United States government attempted to deploy an encryption system, the Clipper chip, with an explicit backdoor for law enforcement and national security access. The chip was unsuccessful.",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q27502700",
    "itemLabel": "Dirty COW",
    "itemDescription": "computer security vulnerability",
    "link": "https://en.wikipedia.org/wiki/Dirty_COW",
    "text": "Dirty COW (Dirty copy-on-write) is a computer security vulnerability for the Linux kernel that affects all Linux-based operating systems including Android that use older versions of the Linux kernel. It is a local privilege escalation bug that exploits a race condition in the implementation of the copy-on-write mechanism in the kernel's memory-management subsystem. The vulnerability was discovered by Phil Oester. \nBecause of the race condition, with the right timing, a local attacker can exploit the copy-on-write mechanism to turn a read-only mapping of a file into a writable mapping. Although it is a local privilege escalation, remote attackers can use it in conjunction with other exploits that allow remote execution of non-privileged code to achieve remote root access on a computer. The attack itself does not leave traces in the system log.The vulnerability has the Common Vulnerabilities and Exposures designation CVE-2016-5195. Dirty Cow was one of the first security issues transparently fixed in Ubuntu by the Canonical Live Patch service.It has been demonstrated that the vulnerability can be utilized to root any Android device up to Android version 7.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q280428",
    "itemLabel": "cross-site cooking",
    "itemDescription": "browser exploit which allows a site attacker to set a cookie for a browser into the cookie domain of another site server",
    "link": "https://en.wikipedia.org/wiki/Cross-site_cooking",
    "text": "Cross-site cooking is a type of browser exploit which allows a site attacker to set a cookie for a browser into the cookie domain of another site server.\nCross-site cooking can be used to perform session fixation attacks, as a malicious site can fixate the session identifier cookie of another site. \nOther attack scenarios may also be possible, for example: attacker may know of a security vulnerability in server, which is exploitable using a cookie. But if this security vulnerability requires e.g. an administrator password which attacker does not know, cross-site cooking could be used to fool innocent users to unintentionally perform the attack.\nCross site. Cross-site cooking is similar in concept to cross-site scripting, cross-site request forgery, cross-site tracing, cross-zone scripting etc., in that it involves the ability to move data or code between different web sites (or in some cases, between e-mail / instant messages and sites). These problems are linked to the fact that a web browser is a shared platform for different information / applications / sites. Only logical security boundaries maintained by browsers ensures that one site cannot corrupt or steal data from another. However a browser exploit such as cross-site cooking can be used to move things across the logical security boundaries.",
    "aliases": [
      "XSC"
    ],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q28836333",
    "itemLabel": "Cloudbleed",
    "itemDescription": "security bug discovered on February 17, 2017 affecting Cloudflare's reverse proxies, which caused their edge servers to run past the end of a buffer and return memory containing private information (e.g. cookies, authentication tokens)",
    "link": "https://en.wikipedia.org/wiki/Cloudbleed",
    "text": "Cloudbleed is a security bug discovered on February 17, 2017 affecting Cloudflare's reverse proxies, which caused their edge servers to run past the end of a buffer and return memory that contained private information such as HTTP cookies, authentication tokens, HTTP POST bodies, and other sensitive data.\nAs a result, data from Cloudflare customers was leaked out and went to any other Cloudflare customers that happened to be in the server's memory on that particular moment. Some of this data was cached by search engines.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "memory leak",
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q3084134",
    "itemLabel": "CRIME",
    "itemDescription": "security exploit against secret web cookies",
    "link": "https://en.wikipedia.org/wiki/CRIME",
    "text": "CRIME (Compression Ratio Info-leak Made Easy) is a security exploit against secret web cookies over connections using the HTTPS and SPDY protocols that also use data compression. When used to recover the content of secret authentication cookies, it allows an attacker to perform session hijacking on an authenticated web session, allowing the launching of further attacks. CRIME was assigned CVE-2012-4929.",
    "aliases": [
      "CRIME attack",
      "Compression Ratio Info-leak Made Easy"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability",
      "exploit"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q3549876",
    "itemLabel": "Windows Metafile vulnerability",
    "link": "https://en.wikipedia.org/wiki/Windows_Metafile_vulnerability",
    "text": "The Windows Metafile vulnerability\u2014also called the Metafile Image Code Execution and abbreviated MICE\u2014is a security vulnerability in the way some versions of the Microsoft Windows operating system handled images in the Windows Metafile format. It permits arbitrary code to be executed on affected computers without the permission of their users. It was discovered on December 27, 2005, and the first reports of affected computers were announced within 24 hours. Microsoft released a high-priority update to eliminate this vulnerability via Windows Update on January 5, 2006. Attacks using this vulnerability are known as WMF exploits.\nThe vulnerability was located in gdi32.dll and existed in all versions of Microsoft Windows from Windows 3.0 to Windows Server 2003 R2. However, attack vectors only exist in NT-based versions of Windows (Windows NT, Windows 2000, Windows XP and Windows Server 2003). Exploits taking advantage of the vulnerability on Windows NT-based systems facilitated the propagation of various types of malware, typically through drive-by downloads.\nDue to extreme impact, this bug won the 2007 Pwnie Award for \"Mass 0wnage\" and \"Breaking the Internet\".",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q371199",
    "itemLabel": "cross-site scripting",
    "link": "https://en.wikipedia.org/wiki/Cross-site_scripting",
    "text": "Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy. Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec as of 2007. In 2017, XSS is still considered a major threat vector. XSS effects vary in \nrange from petty nuisance to significant security risk, depending on the sensitivity of the data handled by the vulnerable site and the nature of any security mitigation implemented by the site's owner.",
    "aliases": [
      "cross site scripting",
      "XSS"
    ],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q39573057",
    "itemLabel": "BlueBorne",
    "itemDescription": "Bluetooth vulnerability, an attack vector",
    "link": "https://en.wikipedia.org/wiki/BlueBorne_(security_vulnerability)",
    "text": "BlueBorne is a generic term for several security vulnerabilities affecting electronic devices involving various Bluetooth implementations in Android, iOS,  Linux and Windows. Many devices are affected, including laptops, smart cars, smartphones and wearable gadgets. The vulnerabilities were first reported by Armis, an IoT security firm, on September 12, 2017. According to Armis, \"The BlueBorne attack vector can potentially affect all devices with Bluetooth capabilities, estimated at over 8.2 billion devices today [2017].\"",
    "aliases": [
      "BlueBorne attack"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q4071926",
    "itemLabel": "random number generator attack",
    "link": "https://en.wikipedia.org/wiki/Random_number_generator_attack",
    "text": "The security of cryptographic systems depends on some secret data that is known to authorized persons but unknown and unpredictable to others. To achieve this unpredictability, some randomization is typically employed. Modern cryptographic protocols often require frequent generation of random quantities. Cryptographic attacks that subvert or exploit weaknesses in this process are known as random number generator attacks.\nA high quality random number generation (RNG) process is almost always required for security, and lack of quality generally provides attack vulnerabilities and so leads to lack of security, even to complete compromise, in cryptographic systems. The RNG process is particularly attractive to attackers because it is typically a single isolated hardware or software component easy to locate. If the attacker can substitute pseudo-random bits generated in a way they can predict, security is totally compromised, yet generally undetectable by any upstream test of the bits. Furthermore, such attacks require only a single access to the system that is being compromised. No data need be sent back in contrast to, say, a computer virus that steals keys and then e-mails them to some drop point.\n\n",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q42936978",
    "itemLabel": "ROCA vulnerability",
    "itemDescription": "cryptographic weakness",
    "link": "https://en.wikipedia.org/wiki/ROCA_vulnerability",
    "text": "The ROCA vulnerability is a cryptographic weakness that allows the \nprivate key of a key pair to be recovered from the public key in keys generated by devices with the vulnerability. \"ROCA\" is an acronym for \"Return of Coppersmith's attack\". The vulnerability has been given the identifier CVE-2017-15361. \nThe vulnerability arises from a problem with an approach to RSA key generation used in a software library, RSALib, provided by Infineon Technologies, and incorporated in many smart cards and Trusted Platform Module (TPM) implementations. The same vulnerability appears in recent YubiKey 4 tokens, often used to generate PGP keys. Keys of lengths 512, 1024, and 2048 bits generated using the Infineon library are vulnerable to a practical ROCA attack. The research team that discovered the attack (all with Masaryk University and led by Mat\u00fa\u0161 Nemec and Marek S\u00fds)  estimate that it affects around one-quarter of all current TPM devices globally. Millions of smart cards are believed to be affected.The team informed Infineon of the RSALib problem in February 2017, but withheld public notice until mid-October, citing responsible disclosure. At that time they announced the attack and provided a tool to test public keys for vulnerability. They published the details of the attack in November.",
    "aliases": [
      "Return of the Coppersmith Attack",
      "Return Of Coppersmith Attack",
      "CVE-2017-15361"
    ],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q47036859",
    "itemLabel": "Meltdown",
    "itemDescription": "hardware vulnerability affecting Intel x86 microprocessors, IBM POWER processors, and some ARM-based microprocessors, allowing a rogue process to read all memory without authorization",
    "link": "https://en.wikipedia.org/wiki/Meltdown_(security_vulnerability)",
    "text": "Meltdown is a hardware vulnerability affecting Intel x86 microprocessors, IBM POWER processors, and some ARM-based microprocessors. It allows a rogue process to read all memory, even when it is not authorized to do so.\nMeltdown affects a wide range of systems. At the time of disclosure, this included all devices running any but the most recent and patched versions of iOS, Linux, macOS, or Windows. Accordingly, many servers and cloud services were impacted, as well as a potential majority of smart devices and embedded devices using ARM based processors (mobile devices, smart TVs, printers and others), including a wide range of networking equipment.\nA purely software workaround to Meltdown has been assessed as slowing computers between 5 and 30 percent in certain specialized workloads, although companies responsible for software correction of the exploit are reporting minimal impact from general benchmark testing.Meltdown was issued a Common Vulnerabilities and Exposures ID of CVE-2017-5754, also known as Rogue Data Cache Load (RDCL), in January 2018. It was disclosed in conjunction with another exploit, Spectre, with which it shares some, but not all characteristics. The Meltdown and Spectre vulnerabilities are considered \"catastrophic\" by security analysts. The vulnerabilities are so severe that, initially, security researchers believed the reports to be false.Several procedures to help protect home computers and related devices from the Meltdown and Spectre security vulnerabilities have been published. Meltdown patches may produce performance loss. Spectre patches have been reported to significantly reduce performance, especially on older computers; on the newer eighth-generation Core platforms, benchmark performance drops of 2\u201314 percent have been measured. On January 18, 2018, unwanted reboots, even for newer Intel chips, due to Meltdown and Spectre patches, were reported. Nonetheless, according to Dell: \"No 'real-world' exploits of these vulnerabilities [i.e., Meltdown and Spectre] have been reported to date [January 26, 2018], though researchers have produced proof-of-concepts.\" Further, recommended preventions include: \"promptly adopting software updates, avoiding unrecognized hyperlinks and websites, not downloading files or applications from unknown sources ... following secure password protocols ... [using] security software to help protect against malware (advanced threat prevention software or anti-virus).\"On January 25, 2018, the current status and possible future considerations in solving the Meltdown and Spectre vulnerabilities were presented.On March 15, 2018, Intel reported that it will redesign its CPU processors (performance losses to be determined) to help protect against the Meltdown and related Spectre vulnerabilities (especially, Meltdown and Spectre-V2, but not Spectre-V1), and expects to release the newly redesigned processors later in 2018. On October 8, 2018, Intel is reported to have added hardware and firmware mitigations regarding Spectre and Meltdown vulnerabilities to its latest processors.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q47037422",
    "itemLabel": "Spectre",
    "itemDescription": "vulnerability in microprocessors performing branch prediction: speculative execution due to branch misprediction may leave observable side effects, leaking private data; discovered by J. Horn, P. Kocher, D. Genkin, M. Hamburg, M. Lipp, Y. Yarom",
    "link": "https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)",
    "text": "Spectre is a vulnerability that affects modern microprocessors that perform branch prediction.\nOn most processors, the speculative execution resulting from a branch misprediction may leave observable side effects that may reveal private data to attackers. For example, if the pattern of memory accesses performed by such speculative execution depends on private data, the resulting state of the data cache constitutes a side channel through which an attacker may be able to extract information about the private data using a timing attack.Two Common Vulnerabilities and Exposures IDs related to Spectre, CVE-2017-5753 (bounds check bypass, Spectre-V1, Spectre 1.0) and CVE-2017-5715 (branch target injection, Spectre-V2), have been issued. JIT engines used for JavaScript were found to be vulnerable. A website can read data stored in the browser for another website, or the browser's memory itself.On March 15, 2018, Intel reported that it will redesign its CPUs (performance losses to be determined) to help protect against the Spectre and related Meltdown vulnerabilities (especially, Spectre variant 2 and Meltdown, but not Spectre variant 1), and expects to release the newly redesigned processors later in 2018. On October 8, 2018, Intel is reported to have added hardware and firmware mitigations regarding Spectre and Meltdown vulnerabilities to its latest processors. On October 18, 2018, MIT researchers suggested a new mitigation approach, called DAWG (Dynamically Allocated Way Guard), which may promise better security without compromising performance.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q506059",
    "itemLabel": "SQL Injection",
    "itemDescription": "type of code injection software vulnerability",
    "link": "https://en.wikipedia.org/wiki/SQL_injection",
    "text": "SQL injection  is a code injection technique, used  to attack data-driven applications, in which nefarious SQL statements are inserted into an entry field for execution (e.g. to dump the database contents to the attacker). SQL injection must exploit a security vulnerability in an application's software, for example, when user input is either incorrectly filtered for string literal escape characters embedded in SQL statements or user input is not strongly typed and unexpectedly executed. SQL injection is mostly known as an attack vector for websites but can be used to attack any type of SQL database.\nSQL injection attacks allow attackers to spoof identity, tamper with existing data, cause repudiation issues such as voiding transactions or changing balances, allow the complete disclosure of all data on the system, destroy the data or make it otherwise unavailable, and become administrators of the database server.\nIn a 2012 study, it was observed that the average web application received 4 attack campaigns per month, and retailers received twice as many attacks as other industries.",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q5188210",
    "itemLabel": "cross-zone scripting",
    "itemDescription": "browser exploit taking advantage of a vulnerability within a zone-based security solution; allows content in unprivileged zones to be executed with the permissions of a privileged zone",
    "link": "https://en.wikipedia.org/wiki/Cross-zone_scripting",
    "text": "Cross-zone scripting is a browser exploit taking advantage of a vulnerability within a zone-based security solution. The attack allows content (scripts) in unprivileged zones to be executed with the permissions of a privileged zone - i.e. a privilege escalation within the client (web browser) executing the script. The vulnerability could be: \n\na web browser bug which under some conditions allows content (scripts) in one zone to be executed with the permissions of a higher privileged zone.\na web browser configuration error; unsafe sites listed in privileged zones.\na cross-site scripting vulnerability within a privileged zoneA common attack scenario involves two steps. The first step is to use a cross-zone scripting vulnerability to get scripts executed within a privileged zone. To complete the attack, then perform malicious actions on the computer using insecure ActiveX components.\nThis type of vulnerability has been exploited to silently install various malware (such as spyware, remote control software, worms and such) onto computers browsing a malicious web page. \n\n",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q53469713",
    "itemLabel": "EFAIL",
    "itemDescription": "computer vulnerability",
    "link": "https://en.wikipedia.org/wiki/EFAIL",
    "text": "Efail, also written EFAIL, is a security hole in email systems with which content can be transmitted in encrypted form. This gap allows attackers to access the decrypted content of an email if it contains active content like HTML or JavaScript, or if loading of external content has been enabled in the client. Affected email clients include GMail, Apple Mail, and Microsoft Outlook.Two related Common Vulnerabilities and Exposures IDs, CVE-2017-17688 and CVE-2017-17689, have been issued. The security gap was made public on 13 May 2018 by Damian Poddebniak, Christian Dresen, Jens M\u00fcller, Fabian Ising, Sebastian Schinzel, Simon Friedberger, Juraj Somorovsky and J\u00f6rg Schwenk as part of a contribution to the 27th USENIX Security Symposium, Baltimore, August 2018. \nAs a result of the vulnerability, the content of an attacked encrypted email can be transmitted to the attacker in plain text by a vulnerable email client. The used encryption keys are not disclosed.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q55391968",
    "itemLabel": "TLBleed",
    "link": "https://en.wikipedia.org/wiki/TLBleed",
    "text": "TLBleed is a cryptographic side-channel attack that uses machine learning to exploit a timing side-channel via the translation look-aside buffer (TLB) on modern microprocessors that use simultaneous multithreading. As of  June 2018, the attack has only been demonstrated experimentally on Intel processors; it is speculated that other processors may also potentially be vulnerable to a variant of the attack, but no proof of concept has been demonstrated. Recent news from AMD indicates that their processors are not vulnerable to this attack. The attack led to the OpenBSD project disabling simultaneous multithreading on Intel microprocessors. The OpenBSD project leader Theo de Raadt has stated that, while the attack could theoretically be addressed by preventing tasks with different security contexts from sharing physical cores, such a fix is currently impractical because of the complexity of the problem.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q56150766",
    "itemLabel": "Foreshadow (security vulnerability)",
    "itemDescription": "Hardware vulnerability for Intel processors",
    "link": "https://en.wikipedia.org/wiki/Foreshadow_(security_vulnerability)",
    "text": "Foreshadow (known as L1 Terminal Fault (L1TF) by Intel) is a vulnerability that affects modern microprocessors that was first discovered by two independent teams of researchers in January 2018, but was first disclosed to the public on 14 August 2018. The vulnerability is a speculative execution attack on Intel processors that may result in the disclosure of sensitive information stored in personal computers and third-party clouds. There are two versions: the first version (original/Foreshadow) (CVE-2018-3615) targets data from SGX enclaves; and the second version (next-generation/Foreshadow-NG) (CVE-2018-3620 and CVE-2018-3646) targets virtual machines (VMs), hypervisors (VMM), operating systems (OS) kernel memory, and System Management Mode (SMM) memory. A listing of affected Intel hardware has been posted.Foreshadow is similar to the Spectre security vulnerabilities discovered earlier to affect Intel and AMD chips, and the Meltdown vulnerability that also affected Intel. However, AMD products, according to AMD, are not affected by the Foreshadow security flaws. According to one expert, \"[Foreshadow] lets malicious software break into secure areas that even the Spectre and Meltdown flaws couldn't crack\". Nonetheless, one of the variants of Foreshadow goes beyond Intel chips with SGX technology, and affects \"all [Intel] Core processors built over the last seven years\".Foreshadow may be very difficult to exploit, and there seems to be no evidence to date (15 August 2018) of any serious hacking involving the Foreshadow vulnerabilities. Nevertheless, applying software patches may help alleviate some concern(s), although the balance between security and performance may be a worthy consideration. Companies performing cloud computing may see a significant decrease in their overall computing power; individuals, however, may not likely see any performance impact, according to researchers. The real fix, according to Intel, is by replacing today's processors. Intel further states, \"These changes begin with our next-generation Intel Xeon Scalable processors (code-named Cascade Lake), as well as new client processors expected to launch later this year [2018].\"On 16 August 2018, researchers presented technical details of the Foreshadow security vulnerabilities in a seminar, and publication, entitled \"Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution\" at a USENIX security conference.",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q6007765",
    "itemLabel": "Improper input validation",
    "link": "https://en.wikipedia.org/wiki/Improper_input_validation",
    "text": "Improper input validation or unchecked user input is a type of vulnerability in computer software that may be used for security exploits.Examples include:\n\nBuffer overflow\nCross-site scripting\nDirectory traversal\nNull byte injection\nSQL injection\nUncontrolled format string",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q6014806",
    "itemLabel": "file inclusion vulnerability",
    "itemDescription": "ability to specify an unauthorized computer program source",
    "link": "https://en.wikipedia.org/wiki/Include_vulnerability",
    "text": "A file inclusion vulnerability is a type of web vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time.  A file include vulnerability is distinct from a generic directory traversal attack, in that directory traversal is a way of gaining unauthorized file system access, and a file inclusion vulnerability subverts how an application loads code for execution.  Successful exploitation of a file include vulnerability will result in remote code execution on the web server that runs the affected web application.",
    "aliases": [
      "include vulnerability"
    ],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q616554",
    "itemLabel": "race condition",
    "itemDescription": "type of software defect",
    "link": "https://en.wikipedia.org/wiki/Race_condition",
    "text": "A race condition or race hazard is the behavior of an electronics, software, or other system where the system's substantive behavior is dependent on the sequence or timing of other uncontrollable events. It becomes a bug when one or more of the possible behaviors is undesirable.\nThe term race condition was already in use by 1954, for example in David A. Huffman's doctoral thesis \"The synthesis of sequential switching circuits\". Race conditions can occur especially in logic circuits, multithreaded or distributed software programs.\n\n",
    "aliases": [],
    "superClasses": [
      "software bug",
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q61997140",
    "itemLabel": "CVE-2019-1591",
    "itemDescription": "Vulnerability in Cisco Nexus Fabric Switches",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q669163",
    "itemLabel": "arithmetic overflow",
    "itemDescription": "condition in computer arithmetics when a calculation yields a result that is greater in magnitude than that which a given storage location can represent",
    "link": "https://en.wikipedia.org/wiki/Arithmetic_overflow",
    "text": "In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits \u2013 either larger than the maximum or lower than the minimum representable value.\nThe most common result of an overflow is that the least significant representable digits of the result are stored; the result is said to wrap around the maximum (i.e. modulo a power of the radix, usually two in modern computers, but sometimes ten or another radix).\nAn overflow condition may give results leading to unintended behavior. In particular, if the possibility has not been anticipated, overflow can compromise a program's reliability and security.\nFor some applications, such as timers and clocks, wrapping on overflow can be desirable. The C11 standard states that for unsigned integers modulo wrapping is the defined behavior and the term overflow never applies: \"a computation involving unsigned operands can never overflow.\"On some processors like graphics processing units (GPUs) and digital signal processors (DSPs) which support saturation arithmetic, overflowed results would be \"clamped\", i.e. set to the minimum or the maximum value in the representable range, rather than wrapped around.",
    "aliases": [
      "integer overflow",
      "integer manipulation attack"
    ],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q6698050",
    "itemLabel": "Lucky Thirteen attack",
    "itemDescription": "cryptographic timing attack against implementations of TLS that use the CBC mode, reported in February 2013 by N. J. AlFardan and K. Paterson",
    "link": "https://en.wikipedia.org/wiki/Lucky_Thirteen_attack",
    "text": "The Lucky Thirteen attack is a cryptographic timing attack against implementations of the Transport Layer Security (TLS) protocol that use the CBC mode of operation, first reported in February 2013 by its developers Nadhem J. AlFardan and Kenny Paterson of the Information Security Group at Royal Holloway, University of London.\n\n",
    "aliases": [],
    "superClasses": [],
    "types": [
      "computer vulnerability"
    ]
  },
  {
    "item": "http://www.wikidata.org/entity/Q6784017",
    "itemLabel": "mass assignment vulnerability",
    "itemDescription": "inability of software to discern authorized from unauthorized data modification requests",
    "link": "https://en.wikipedia.org/wiki/Mass_assignment_vulnerability",
    "text": "Mass assignment is a computer vulnerability where an active record pattern in a web application is abused to modify data items that the user should not normally be allowed to access such as password, granted permissions, or administrator status.\nMany web application frameworks offer an active record and object-relational mapping features, where external data in serialization formats is automatically converted on input into internal objects and, in turn, into database record fields. If the framework's interface for that conversion is too permissive and the application designer doesn't mark specific fields as immutable, it is possible to overwrite fields that were never intended to be modified from outside (e.g. admin permissions flag).These vulnerabilities have been found in applications written in Ruby on Rails, ASP.NET MVC, and Java Play framework.In 2012 mass assignment on Ruby on Rails allowed bypassing of mapping restrictions and resulted in proof of concept injection of unauthorized SSH public keys into user accounts at GitHub. Further vulnerabilities in Ruby on Rails allowed creation of internal objects through a specially crafted JSON structure.In ASP.NET Core mapping restriction can be declared using the [BindNever] attribute.",
    "aliases": [],
    "superClasses": [
      "computer vulnerability"
    ],
    "types": []
  },
  {
    "item": "http://www.wikidata.org/entity/Q7189582",
    "itemLabel": "physical access",
    "itemDescription": "ability of people to physically gain access to a computer system",
    "link": "https://en.wikipedia.org/wiki/Physical_access",
    "text": "Physical access is a term in computer security that refers to the ability of people to physically gain access to a computer system. According to Gregory White, \"Given physical access to an office, the knowledgeable attacker will quickly be able to find the information needed to gain access to the organization's computer systems and network.\"",
    "aliases": [],
    "superClasses": [
      "access"
    ],
    "types": [
      "computer vulnerability"
    ]
  }
]